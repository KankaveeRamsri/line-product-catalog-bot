# -*- coding: utf-8 -*-
# Selenium script (fixed) for opening BNN category URLs, auto-accepting popups,
# waiting for product cards, and extracting product names robustly.
#
# ‚úÖ Changes from previous version:
#   - Added close_popups() with "Allow/‡∏≠‡∏ô‡∏∏‡∏ç‡∏≤‡∏ï/Accept/‡∏¢‡∏≠‡∏°‡∏£‡∏±‡∏ö/‡∏ï‡∏Å‡∏•‡∏á" selectors
#   - More robust wait_products() that tries multiple selectors
#   - Scroll each product card into view before reading text
#   - get_name(): multi-strategy extraction (title nodes -> img alt -> a[aria-label|title] -> JS innerText)
#   - Optional wait for title nodes presence to avoid empty texts

from selenium import webdriver
from selenium.webdriver.common.by import By
from selenium.webdriver.support.ui import WebDriverWait
from selenium.webdriver.support import expected_conditions as EC
import chromedriver_autoinstaller
import time
import re

chromedriver_autoinstaller.install()

CATEGORY_URLS = [
    "https://www.bnn.in.th/th/p/notebook?ref=search-result",
    # "https://www.bnn.in.th/th/p/smartphone-and-accessories?ref=search-result",
    # "https://www.bnn.in.th/th/p/gaming-gear?ref=search-result",
]

driver = webdriver.Chrome()
wait = WebDriverWait(driver, 15)

BADGE_PAT = re.compile(r"(‡∏õ‡∏£‡∏∞‡∏´‡∏¢‡∏±‡∏î|‡∏ø|‡∏ö‡∏≤‡∏ó|%|‡∏ú‡πà‡∏≠‡∏ô|‡∏Ç‡∏≠‡∏á‡πÅ‡∏ñ‡∏°|‡πÅ‡∏ñ‡∏°|‡∏™‡πà‡∏ß‡∏ô‡∏•‡∏î)", re.I)
def is_valid_name(s: str) -> bool:
    if not s:
        return False
    if BADGE_PAT.search(s):
        return False            # ‡∏ï‡∏±‡∏î badge/‡∏£‡∏≤‡∏Ñ‡∏≤/‡πÇ‡∏õ‡∏£‡∏Ø
    return len(s.strip()) >= 6   # ‡∏Å‡∏±‡∏ô‡∏Ç‡πâ‡∏≠‡∏Ñ‡∏ß‡∏≤‡∏°‡∏™‡∏±‡πâ‡∏ô ‡πÜ ‡∏ó‡∏µ‡πà‡πÑ‡∏°‡πà‡∏ô‡πà‡∏≤‡πÉ‡∏ä‡πà‡∏ä‡∏∑‡πà‡∏≠


def close_popups():
    """Try to click away popups/cookie banners/allow dialogs."""
    xpaths = [
        "//button[contains(.,'Allow')]",
        "//button[contains(.,'‡∏≠‡∏ô‡∏∏‡∏ç‡∏≤‡∏ï')]",
        "//button[contains(.,'Accept')]",
        "//button[contains(.,'‡∏¢‡∏≠‡∏°‡∏£‡∏±‡∏ö')]",
        "//button[contains(.,'‡∏ï‡∏Å‡∏•‡∏á')]",
        "//*[@aria-label='close']",
        "//*[contains(@class,'close') and (self::button or self::div)]",
    ]
    for xp in xpaths:
        try:
            btn = WebDriverWait(driver, 2).until(EC.element_to_be_clickable((By.XPATH, xp)))
            btn.click()
            time.sleep(0.2)
        except:
            pass

def wait_products():
    """Wait for any product card selector to appear; return the successful locator."""
    candidates = [
        (By.CSS_SELECTOR, '[data-testid*="product-card"]'),
        (By.CSS_SELECTOR, 'a[href*="/th/p/"][class*="product"]'),
        (By.CSS_SELECTOR, 'li a[href*="/th/p/"]'),
    ]
    for loc in candidates:
        try:
            wait.until(EC.presence_of_element_located(loc))
            return loc
        except:
            continue
    raise RuntimeError("‡πÑ‡∏°‡πà‡∏û‡∏ö‡∏Å‡∏≤‡∏£‡πå‡∏î‡∏™‡∏¥‡∏ô‡∏Ñ‡πâ‡∏≤‡πÉ‡∏ô‡∏´‡∏ô‡πâ‡∏≤")

def get_name(el):
    # 0) ‡∏î‡∏∂‡∏á‡∏à‡∏≤‡∏Å‡∏•‡∏¥‡∏á‡∏Å‡πå‡∏™‡∏¥‡∏ô‡∏Ñ‡πâ‡∏≤‡∏´‡∏•‡∏±‡∏Å (‡∏°‡∏±‡∏Å‡∏°‡∏µ aria-label/title ‡∏ó‡∏µ‡πà‡πÄ‡∏õ‡πá‡∏ô‡∏ä‡∏∑‡πà‡∏≠‡∏à‡∏£‡∏¥‡∏á)
    try:
        a = el.find_element(By.CSS_SELECTOR, "a[href*='/th/p/']")
        for attr in ["aria-label", "title"]:
            v = (a.get_attribute(attr) or "").strip()
            if is_valid_name(v):
                return v
        # ‡∏ñ‡πâ‡∏≤‡πÉ‡∏ô‡∏•‡∏¥‡∏á‡∏Å‡πå‡∏°‡∏µ h3/‡∏´‡∏±‡∏ß‡∏Ç‡πâ‡∏≠
        try:
            t = a.find_element(By.CSS_SELECTOR, "h3, [class*='title']")
            v = t.text.strip()
            if is_valid_name(v):
                return v
        except:
            pass
    except:
        pass

    # 1) ‡πÇ‡∏´‡∏ô‡∏î title ‡∏ó‡∏±‡πà‡∏ß‡πÑ‡∏õ (‡πÄ‡∏ú‡∏∑‡πà‡∏≠ DOM ‡πÄ‡∏õ‡∏•‡∏µ‡πà‡∏¢‡∏ô)
    for css in ['[data-testid*="title"]', '[class*="title"]', 'h3', 'h2', '.name', '.product-name']:
        try:
            sub = el.find_element(By.CSS_SELECTOR, css)
            v = sub.text.strip()
            if is_valid_name(v):
                return v
        except:
            pass

    # 2) alt ‡∏Ç‡∏≠‡∏á‡∏†‡∏≤‡∏û (‡∏ö‡∏≤‡∏á‡∏ó‡∏µ‡πÄ‡∏õ‡πá‡∏ô‡∏ä‡∏∑‡πà‡∏≠‡πÄ‡∏ï‡πá‡∏°)
    try:
        img = el.find_element(By.CSS_SELECTOR, "img")
        alt = (img.get_attribute("alt") or "").strip()
        if is_valid_name(alt):
            return alt
    except:
        pass

    # 3) Fallback: innerText ‡∏ó‡∏±‡πâ‡∏á‡∏Å‡∏≤‡∏£‡πå‡∏î ‡πÅ‡∏•‡πâ‡∏ß‡∏Å‡∏£‡∏≠‡∏á‡∏ö‡∏£‡∏£‡∏ó‡∏±‡∏î‡∏ó‡∏µ‡πà‡∏î‡∏π‡πÄ‡∏õ‡πá‡∏ô‡∏ä‡∏∑‡πà‡∏≠
    try:
        txt = (driver.execute_script("return arguments[0].innerText || '';", el) or "").strip()
        for line in [x.strip() for x in txt.splitlines()]:
            if is_valid_name(line):
                return line
    except:
        pass
    return None


try:
    for url in CATEGORY_URLS:
        print(f"\n‚û°Ô∏è ‡πÄ‡∏õ‡∏¥‡∏î‡∏´‡∏°‡∏ß‡∏î: {url}")
        driver.get(url)
        close_popups()

        # Optional: wait until any title node exists to reduce empty reads
        try:
            WebDriverWait(driver, 5).until(
                EC.presence_of_element_located((By.CSS_SELECTOR, "h3, [class*='title'], [data-testid*='title']"))
            )
        except:
            pass

        locator = wait_products()
        close_popups()

        cards = driver.find_elements(*locator)
        print(f"‚úÖ ‡∏™‡∏¥‡∏ô‡∏Ñ‡πâ‡∏≤‡∏û‡∏ö‡πÅ‡∏•‡πâ‡∏ß: {len(cards)} ‡∏£‡∏≤‡∏¢‡∏Å‡∏≤‡∏£")

        # Show first 10 names as a sanity check
        names = []
        want = 10
        # ‡∏î‡∏π‡∏Å‡∏≤‡∏£‡πå‡∏î‡πÄ‡∏ú‡∏∑‡πà‡∏≠‡πÑ‡∏ß‡πâ 30 ‡πÉ‡∏ö‡πÅ‡∏£‡∏Å (‡πÄ‡∏ú‡∏∑‡πà‡∏≠‡∏°‡∏µ‡∏Å‡∏≤‡∏£‡πå‡∏î‡∏ó‡∏µ‡πà‡πÑ‡∏°‡πà‡πÉ‡∏ä‡πà‡∏™‡∏¥‡∏ô‡∏Ñ‡πâ‡∏≤/‡∏ä‡∏∑‡πà‡∏≠‡∏¢‡∏±‡∏á‡πÑ‡∏°‡πà‡∏Ç‡∏∂‡πâ‡∏ô)
        for el in cards[:30]:
            try:
                driver.execute_script("arguments[0].scrollIntoView({block:'center'});", el)
                time.sleep(0.3)  # ‡∏£‡∏≠‡πÉ‡∏´‡πâ virtualized DOM ‡πÄ‡∏£‡∏ô‡πÄ‡∏î‡∏≠‡∏£‡πå‡∏ä‡∏∑‡πà‡∏≠
                nm = get_name(el)
                if nm:
                    names.append(nm)
                    if len(names) == want:
                        break
            except:
                pass

        print(f"üßæ ‡∏ï‡∏±‡∏ß‡∏≠‡∏¢‡πà‡∏≤‡∏á‡∏ä‡∏∑‡πà‡∏≠‡∏™‡∏¥‡∏ô‡∏Ñ‡πâ‡∏≤ {len(names)} ‡∏ä‡∏¥‡πâ‡∏ô‡πÅ‡∏£‡∏Å:")
        for n in names:
            print("  -", n)

finally:
    driver.quit()
